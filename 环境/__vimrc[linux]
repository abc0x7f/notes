" All system-wide defaults are set in $VIMRUNTIME/debian.vim and sourced by
" the call to :runtime you can find below.  If you wish to change any of those
" settings, you should do it in this file (/etc/vim/vimrc), since debian.vim
" will be overwritten everytime an upgrade of the vim packages is performed.
" It is recommended to make changes after sourcing debian.vim since it alters
" the value of the 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
  syntax on
endif

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
"set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
"if has("autocmd")
"  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
"endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
"if has("autocmd")
"  filetype plugin indent on
"endif

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
"set showcmd		" Show (partial) command in status line.
"set showmatch		" Show matching brackets.
"set ignorecase		" Do case insensitive matching
"set smartcase		" Do smart case matching
"set incsearch		" Incremental search
"set autowrite		" Automatically save before commands like :next and :make
"set hidden		" Hide buffers when they are abandoned
"set mouse=a		" Enable mouse usage (all modes)

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif
syntax on
set guifont=Source_Code_Pro_Medium:h14:i
color wwdc16
set autoread
set nocompatible
set noswapfile
set backspace=2
set ts=4
set sts=4
set sw=4
set cin
set smartindent
set go=
set nu
set mouse=a
set clipboard=unnamed
set nobackup
set autoindent

map<F9> :!g++ % -o %< && ./%< <CR>
imap<F9> :!g++ % -o %< && ./%< <CR>

map<F6> :!gedit % <CR>
imap<F6> :!gedit % <CR>

exec 'cd ' . fnameescape('~/')
au GUIEnter * call libcallnr("vimtweak64.dll", "SetAlpha", 220)
if executable("vimtweak.dll") 
autocmd guienter * call libcallnr("vimtweak","SetAlpha",222) 
endif

behave mswin
map<F1> <Esc>:call Jav() <CR>
imap<F1> <Esc>:call Jav() <CR>
func! Jav()
    exec "w"
    exec "!javac %"
    exec "!java %<"
endfunc
map<F3> <Esc>:call Py() <CR>
imap<F3> <Esc>:call Py() <CR>
func! Py()
    exec "w"
    exec "!python %"
endfunc
source $VIMRUNTIME/mswin.vim
map<F10> <Esc>:w <CR>
imap<F10> <Esc>:w <CR>
map<F5> :call O()<CR>
imap <F5> <ESC>:call O()<CR>
map<F2> <Esc>:q! <CR>
map<F8> <Esc>:YcmDiags <CR>
map<F4> <Esc>:call Add()<CR>


func! O()
	exec "vsp %<.out"
	exec "sp %<.txt"
	exec "sp %<.in"
endfunc

func! Add()
     call setline(1,"#include<bits/stdc++.h>")
     call append(line("."), "#define Mem(a,v) memset(a,v,sizeof(a))") 
     call append(line(".")+1, "using namespace std;")
     call append(line(".")+2, "typedef long long ll;")
     call append(line(".")+3, "typedef double lf;")
     call append(line(".")+4, "")
     call append(line(".")+5, "int CheckMax(int& a,int b){return a<b?a=b,1:0;}")
     call append(line(".")+6, "int CheckMin(int& a,int b){return a>b?a=b,1:0;}")
     call append(line(".")+7, "int GetCh(){return getchar();}")
     call append(line(".")+8, "int __read(){")
     call append(line(".")+9, "	int Value=0,Base=1;char Ch=getchar();")
     call append(line(".")+10, "    for(;!isdigit(Ch);Ch=getchar())if(Ch=='-')Base=-1;") 
     call append(line(".")+11, "    for(;isdigit(Ch);Ch=getchar())Value=Value*10+(Ch^'0');") 
     call append(line(".")+12, "    return Value*Base;") 
     call append(line(".")+13, "}") 
     call append(line(".")+14, "") 
     call append(line(".")+15, "int main( ){") 
     call append(line(".")+16, "	int m,n,j,k,i;")
     call append(line(".")+17, "")
     call append(line(".")+18, "    return 0;") 
     call append(line(".")+19, "}") 
endfunc

